// this project is incomplete for now
import("stdfaust.lib");

zita_rev_fdn(f1, f2, t60dc, t60m, fsmax) = 
((si.bus(2*N) :> allpass_combs(N) : feedbackmatrix(N)) ~
    (delayfilters(N, freqs, durs) : fbdelaylines(N)))
    with {
        N = 8;

        // Delay-line lengths in seconds:
        apdelays = (0.020346, 0.024421, 0.031604, 0.027333, 0.022904,
                    0.029291, 0.013458, 0.019123);  //feedforward delays in seconds
        tdelays = (0.153129, 0.210389, 0.127837, 0.256891, 0.174713,
                    0.192303, 0.125000, 0.219991); //total delays in seconds
        tdelays(i) = floor(0.5 + ma.SR*ba.take(i+1, tdelays)); //samples
        apdelay(i) = floor(0.5 + ma.SR*ba.take(i+1, apdelays)); //samples
        fbdelay(i) = tdelay(i) - apdelay(i);

        //NOTE: Since SR is not bounded at compile time, we can't use it to allocate delay lines; hence, the fsmax parameter:
        tdelaymaxfs(i) = floor(0.5 + fsmax*ba.take(i+1, tdelays));
        apdelaymaxfs(i) = floor(0.5 + fsmax*ba.take(i+1, apdelays));
        fbdelaymaxfs(i) = tdelaymaxfs(i) - apdelaymaxfs(i);
        nextpow2(x) = ceil(log(x) / log(2.0));
        maxapdelay(i) = int(2.0^max(1.0, nextpow2(apdelaymaxfs(i))));
        maxfbdelay(i) = int(2.0^max(1.0, nextpow2(fbdelaymaxfs(i))));
        
        apcoeff(i) = select2(i&1, 0.6, -0.6);  // all-pass comb filter
        allpass_combs(N) = 
            par(i, N, (fi.allpass_comb(maxapdelay(i), apdelay(i), apcoeff(i))));  //filters.lib

        fbdelaylines(N) = 


    }
